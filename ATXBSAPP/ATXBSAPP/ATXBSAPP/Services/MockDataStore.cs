// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ATXBSAPP.Services;
//
//    var mockDataStore = MockDataStore.FromJson(jsonString);

namespace ATXBSAPP.Services
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class MockDataStore
    {
        [JsonProperty("messages")]
        public object Messages { get; set; }

        [JsonProperty("response")]
        public Response Response { get; set; }

        [JsonProperty("data")]
        public Data Data { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("leadsourcecode")]
        public object Leadsourcecode { get; set; }

        [JsonProperty("medioorigen")]
        public object Medioorigen { get; set; }

        [JsonProperty("nombramiento")]
        public object Nombramiento { get; set; }

        [JsonProperty("tipodedama")]
        public object Tipodedama { get; set; }

        [JsonProperty("leadsourceapp")]
        public object Leadsourceapp { get; set; }

        [JsonProperty("estadosCRM")]
        public object EstadosCrm { get; set; }

        [JsonProperty("dirxCPostalCRM")]
        public DirxCPostalCrm[] DirxCPostalCrm { get; set; }

        [JsonProperty("mensaje")]
        public object Mensaje { get; set; }
    }

    public partial class DirxCPostalCrm
    {
        [JsonProperty("idCpostal")]
        public string IdCpostal { get; set; }

        [JsonProperty("labelCPostal")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long LabelCPostal { get; set; }

        [JsonProperty("idEstado")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long IdEstado { get; set; }

        [JsonProperty("labelEstado")]
        public string LabelEstado { get; set; }

        [JsonProperty("idMunicipio")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long IdMunicipio { get; set; }

        [JsonProperty("labelMunicipio")]
        public string LabelMunicipio { get; set; }

        [JsonProperty("idColonia")]
        public string IdColonia { get; set; }

        [JsonProperty("labelColonia")]
        public string LabelColonia { get; set; }

        [JsonProperty("idPais")]
        public string IdPais { get; set; }

        [JsonProperty("labelPais")]
        public string LabelPais { get; set; }
    }

    public partial class Response
    {
        [JsonProperty("status")]
        public long Status { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }
    }

    public partial class MockDataStore
    {
        public static MockDataStore FromJson(string json) => JsonConvert.DeserializeObject<MockDataStore>(json, ATXBSAPP.Services.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this MockDataStore self) => JsonConvert.SerializeObject(self, ATXBSAPP.Services.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
